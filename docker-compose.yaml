version: '3.8' # Use a recent version

services:
  # Your Rust Application Service
  auth_api:
    build: # Tells docker-compose to build the Dockerfile in the current directory
      context: .
      ssh: ["default"]  # Uses host's SSH agent
    container_name: icarus_auth # Optional: Give the container a specific name
    ports:
      # Map host port 8000 to container port 3000 (adjust as needed)
      - "8000:3000"
    env_file:
      - .env
    depends_on:
      auth_db:
        condition: service_healthy # Wait for the DB to be healthy before starting the app
    restart: unless-stopped # Optional: Restart policy

  # PostgreSQL Database Service
  auth_db:
    image: postgres:17.4-alpine # Use an official Postgres image (Alpine variant is smaller)
    container_name: icarus_auth_db # Optional: Give the container a specific name
    environment:
      # These MUST match the user, password, and database name in the DATABASE_URL above
      POSTGRES_USER: ${POSTGRES_AUTH_USER:-icarus_op}
      POSTGRES_PASSWORD: ${POSTGRES_AUTH_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_AUTH_DB:-icarus_auth_db}
    volumes:
      # Persist database data using a named volume
      - postgres_data:/var/lib/postgresql/data
    ports: []
    healthcheck:
        # Checks if Postgres is ready to accept connections
        test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 10s
    restart: always # Optional: Restart policy

# Define the named volume for data persistence
volumes:
  postgres_data:
    driver: local # Use the default local driver
